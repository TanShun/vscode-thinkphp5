<?php
namespace think;

class Message
{
    protected $code    = '';
    protected $message = '';
    protected $content = null;

    public function __construct($code = 0, $message = '', $content = null)
    {
        $this->code    = $code;
        $this->message = $message;
        $this->content = $content;
    }

    public function __call(string $name, $arguments)
    {
        if (count($arguments) === 0) {
            return in_array($name, ['code', 'message', 'content']) ? $this->$name : null;
        }
        in_array($name, ['code', 'message', 'content']) && $this->$name = $arguments[0];
        return $this;
    }

    public function __toString(): string
    {
        return json_encode([
            'code'    => $this->code,
            'message' => $this->message,
            'content' => $this->content,
        ]);
    }
}

if ($argc < 2) {
    exit(new Message(1, 'The php command is missing.'));
} else if ($argc < 3) {
    exit(new Message(2, 'Workspace folder is needed.'));
} else {
    $appRoot = $argv[1];
    $argv[0] = $_SERVER['argv'][0] = realpath($appRoot . DIRECTORY_SEPARATOR . 'think');
    $argc--;
    unset($argv[1]);
    unset($_SERVER['argv'][1]);
    array_merge($argv);
    array_merge($_SERVER['argv']);
    $entry = $appRoot . DIRECTORY_SEPARATOR . 'thinkphp' . DIRECTORY_SEPARATOR . 'base.php';
    if (!is_file($entry)) {
        exit(new Message(3, 'The entry file "' . $entry . '" for thinkPHP is not found.'));
    }
    try {
        require $entry;
        Container::get('app')->path($appRoot . DIRECTORY_SEPARATOR . 'application')->initialize();
        Console::init();
        Loader::addClassMap(['console' => __DIR__ . DIRECTORY_SEPARATOR . 'console']);
    } catch (\Throwable $throwable) {
        exit(new Message(4, $throwable->getMessage()));
    }
}
