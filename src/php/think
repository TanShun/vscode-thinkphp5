<?php
namespace think;

class VscodeMessage
{
    protected $code    = 0;
    protected $message = 'Success';
    protected $content = '';

    public function __construct($content = '', $message = 'Success', $code = 0)
    {
        if (func_num_args() == 2) {
            $code    = $message;
            $message = $content;
            $content = null;
        }
        $this->code    = $code;
        $this->message = $message;
        $this->content = $content;
    }

    public function __call(string $name, $arguments)
    {
        if (count($arguments) === 0) {
            return in_array($name, ['code', 'message', 'content']) ? $this->$name : null;
        }
        in_array($name, ['code', 'message', 'content']) && $this->$name = $arguments[0];
        return $this;
    }

    public function __toString(): string
    {
        return json_encode([
            'code'    => $this->code,
            'message' => $this->message,
            'content' => $this->content,
        ]);
    }
}

if ($argc < 2) {
    exit(new VscodeMessage('Workspace folder is needed.', 1));
} else if ($argc < 3) {
    exit(new VscodeMessage('The php command is missing.', 2));
} else {
    $appRoot = $argv[1];
    $argv[0] = $_SERVER['argv'][0] = realpath($appRoot . DIRECTORY_SEPARATOR . 'think');
    $argc--;
    unset($argv[1]);
    unset($_SERVER['argv'][1]);
    array_merge($argv);
    array_merge($_SERVER['argv']);
    $entry = $appRoot . DIRECTORY_SEPARATOR . 'thinkphp' . DIRECTORY_SEPARATOR . 'base.php';
    if (!is_file($entry)) {
        exit(new VscodeMessage('The entry file "' . $entry . '" for thinkPHP is not found.', 3));
    }
    try {
        require $entry;
        Loader::addNamespace([
            'vscode' => __DIR__ . DIRECTORY_SEPARATOR . 'vscode',
        ]);
        Container::get('app')->path($appRoot . DIRECTORY_SEPARATOR . 'application')->initialize();
        if (is_file(__DIR__ . DIRECTORY_SEPARATOR . 'command.php')) {
            $vscodeCommands = require __DIR__ . DIRECTORY_SEPARATOR . 'command.php';
            Console::addDefaultCommands($vscodeCommands);
        }
        $console = Console::init(false);
        $console->setCatchExceptions(false);
        $console->run();
    } catch (\Throwable $throwable) {
        exit(new VscodeMessage($throwable->getMessage() ?: 'Error', $throwable->getCode() ?: 4));
    }
}
